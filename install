#!/bin/bash

NPM=false
GO=false
QUIET=false
VERBOSE=false
HOMEBREW=false
PIPX=false
NVIM=false

function usage() {
  echo "Usage: ./install [OPTIONS]
Installs dependencies for my development environment.

Options:
  --all   Installs all dependencies
  --brew  Installs brew dependencies (required for other installs)
  --go    Installs Go packages
  --npm   Installs Go packages
  --pipx  Installs python packages
  --nvim  Installs Neovim
  --q     Mutes all logs
  --help  Prints this help
  "
}

while test $# != 0
do
    case "$1" in
    --all)
      HOMEBREW=true
      GO=true
      NPM=true
      PIPX=true
      NVIM=true
      ;;
    --brew) HOMEBREW=true ;;
    --nvim) NVIM=true ;;
    --go) GO=true;;
    --npm) NPM=true ;;
    --pipx) PIPX=true ;;
    --q) QUIET=true ;;
    --help) usage; exit 0 ;;
    *)  usage; exit 1 ;;
    esac
    shift
done

if ! command -v stow &> /dev/null
then
    echo "Installing stow..."
    brew install stow
fi


function pOnSuccess() {
  if [ $? -eq 0 ]; then
    if ! $QUIET; then echo "$1"; fi
  else
    echo "$2"
  fi
}

function cloneOrUpdate() {
  local GIT_REPO=$(basename "$1")
  if [ ! -d "$2" ]; then
    git clone "$1" "$2" &> /dev/null
    pOnSuccess "  cloned $GIT_REPO" "  could not clone $GIT_REPO"
  else
    (cd "$2"; git pull &> /dev/null)
    pOnSuccess "  updated $GIT_REPO" "  could not update $GIT_REPO"
  fi
}

function installOrUpdateNpm() {
  npm install -g "$1" &> /dev/null
  pOnSuccess "  installed $1 globally" "  could not install $1"
}

function link() {
  local FILE="$1"
  local TARGET="$2"
  ln -sf "$1" "$2"
  pOnSuccess "  linked $2" "   could not link $2!"
}

# Ensure certain files/foldesr exist
touch ~/.zshrc-personal 
mkdir -p ~/.local/bin

# The configuration steps below are idempotent and run on every install.
# By default we just use stow to install the directories as listed.
# However, if any installations require customization, we can do that here.
for dir in $(pwd)/*/
do
    DIR_ROOT="${dir%*/}"
    DIR_NAME="${DIR_ROOT##*/}"
    echo "Configuring ${DIR_NAME}..."
    case $DIR_NAME in
      alacritty)
        link "$(pwd)/alacritty/mac/.alacritty.toml" ~/.alacritty.toml
        pOnSuccess "  linked .alacritty.toml" "  could not link .alacritty.toml!"
        ;;
      executables)
        stow "$DIR_NAME" -t ~/.local/bin
        pOnSuccess "  stowed scripts to ~/.local/bin" "  could not stow scripts!"
        ;;
      git)
        stow "$DIR_NAME"
        git config --global core.excludesfile ~/.gitignore
        git config --global init.templatedir '~/.git_templates'
        git init
        pOnSuccess "  updated git" "  could not update git!"
        ;;
      zsh)
        export ZSH_DIR="$HOME/.oh-my-zsh"
        export NVM_DIR="$HOME/.nvm"
        cloneOrUpdate https://github.com/ohmyzsh/ohmyzsh.git "$ZSH_DIR"
        cloneOrUpdate https://github.com/zsh-users/zsh-syntax-highlighting.git "$ZSH_DIR/custom/plugins/zsh-syntax-highlighting"
        cloneOrUpdate https://github.com/zsh-users/zsh-autosuggestions.git "$ZSH_DIR/custom/plugins/zsh-autosuggestions"
        cloneOrUpdate https://github.com/jeffreytse/zsh-vi-mode "$ZSH_DIR/custom/plugins/zsh-vi-mode"
        cloneOrUpdate https://github.com/paulirish/git-open.git "$ZSH_DIR/custom/plugins/git-open"
        cloneOrUpdate https://github.com/lukechilds/zsh-nvm "$ZSH_DIR/custom/plugins/zsh-nvm"
        cloneOrUpdate https://github.com/romkatv/powerlevel10k.git "$ZSH_DIR/themes/powerlevel10k"
        cloneOrUpdate https://github.com/romkatv/powerlevel10k.git "$ZSH_DIR/themes/powerlevel10k"
	cloneOrUpdate https://github.com/zdharma-continuum/fast-syntax-highlighting.git "$ZSH_DIR/plugins/fast-syntax-highlighting"
        link "$(pwd)/zsh/.zshrc" ~/.zshrc
        ;;
      services)
        find "$(pwd)/services" -type f -name "install" -exec sh -c "echo 'Installing {}' && cd \"\$(dirname \"{}\")\" && ./install" \;
        ;;
      *)
        stow "$DIR_NAME"
        pOnSuccess "  stowed $DIR_NAME" "  could not stow $DIR_NAME!"
        ;;
    esac
done

# Dependency installs
if $HOMEBREW; then
  echo "Installing brews..."
  brew install $(cat deps/homebrew)
  brew cleanup
  yes | $(brew --prefix)/opt/fzf/install > /dev/null 2>&1
fi

if $NPM; then
  echo "Installing global npm dependencies..."
  npm i -g $(cat deps/npm)
fi

if $GO; then
  echo "Installing golang modules..."
  while IFS= read -r PACKAGE; do
      go install "$PACKAGE"
  done < deps/golang
fi

if $PIPX; then
  echo "Installing python packages..."
  pipx install $(cat deps/pip)
fi

if $NVIM; then
  echo "Reinstalling Neovim binary..."
  rm -rf ~/Downloads/nvim-macos-arm64.tar.gz ~/Downloads/nvim-macos-arm64 $HOME/.local/bin/nvim-macos 
  curl -sL https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz -o ~/Downloads/nvim-macos-arm64.tar.gz
  xattr -c ~/Downloads/nvim-macos-arm64.tar.gz
  tar xzf ~/Downloads/nvim-macos-arm64.tar.gz --directory=$HOME/Downloads
  mv ~/Downloads/nvim-macos-arm64 $HOME/.local/bin/nvim-macos
  pip3 -q install pynvim
fi

link "$(pwd)/.hushlogin" ~/.hushlogin
