# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled, all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = False

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = False

# If multi_line_mode is set to "psql", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to "safe", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = psql

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database",
# "shutdown", "delete", or "update".
# Possible values:
# "all" - warn on data definition statements, server actions such as SHUTDOWN, DELETE or UPDATE
# "moderate" - skip warning on UPDATE statements, except for unconditional updates
# "off" - skip all warnings
destructive_warning = all

# Enables expand mode, which is similar to `\x` in psql.
expand = False

# Enables auto expand mode, which is similar to `\x auto` in psql.
auto_expand = False

# If set to True, table suggestions will include a table alias
generate_aliases = False

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = default

# keyword casing preference. Possible values: "lower", "upper", "auto"
keyword_casing = auto

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = False

# Casing of column headers based on the casing_file described above
case_column_headers = True

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = default

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = INFO

# Order of columns when expanding * to column list
# Possible values: "table_order" and "alphabetic"
asterisk_column_order = table_order

# Whether to qualify with table alias/name when suggesting columns
# Possible values: "always", "never" and "if_more_than_one_table"
qualify_columns = if_more_than_one_table

# When no schema is entered, only suggest objects in search_path
search_path_filter = False

# Default pager.
# By default 'PAGER' environment variable is used
# pager = less -SRXF

# Timing of sql statements and table rendering.
timing = True

# Show/hide the informational toolbar with function keymap at the footer.
show_bottom_toolbar = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: psql, fancy_grid and grid.
table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = default

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = False

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values "STOP" or "RESUME"
on_error = STOP

# Set threshold for row limit. Use 0 to disable limiting.
row_limit = 1000

# Truncate long text fields to this value for tabular display (does not apply to csv).
# Leave unset to disable truncation. Example: "max_field_width = "
# Be aware that formatting might get slow with values larger than 500 and tables with
# lots of records.
max_field_width = 500

# Skip intro on startup and goodbye on exit
less_chatty = False

# Postgres prompt
# \t - Current date and time
# \u - Username
# \h - Short hostname of the server (up to first '.')
# \H - Hostname of the server
# \d - Database name
# \p - Database port
# \i - Postgres PID
# \# - "@" sign if logged in as superuser, '>' in other case
# \n - Newline
# \dsn_alias - name of dsn alias if -D option is used (empty otherwise)
# \x1b[...m - insert ANSI escape sequence
# eg: prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
prompt = "\u@\h:\d> "

# Number of lines to reserve for the suggestion menu
min_num_menu_lines = 4

# Character used to left pad multi-line queries to match the prompt size.
multiline_continuation_char = ""

# The string used in place of a null value.
null_string = <null>

# manage pager on startup
enable_pager = True

# Use keyring to automatically save and load password in a secure manner
keyring = True

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = "bg:#ffffff #000000"
completion-menu.completion = "bg:#008888 #ffffff"
completion-menu.meta.completion.current = "bg:#44aaaa #000000"
completion-menu.meta.completion = "bg:#448888 #ffffff"
completion-menu.multi-column-meta = "bg:#aaffff #000000"
scrollbar.arrow = "bg:#003333"
scrollbar = "bg:#00aaaa"
selected = "#ffffff bg:#6666aa"
search = "#ffffff bg:#4444aa"
search.current = "#ffffff bg:#44aa44"
bottom-toolbar = "bg:#222222 #aaaaaa"
bottom-toolbar.off = "bg:#222222 #888888"
bottom-toolbar.on = "bg:#222222 #ffffff"
search-toolbar = noinherit bold
search-toolbar.text = nobold
system-toolbar = noinherit bold
arg-toolbar = noinherit bold
arg-toolbar.text = nobold
bottom-toolbar.transaction.valid = "bg:#222222 #00ff5f bold"
bottom-toolbar.transaction.failed = "bg:#222222 #ff005f bold"
# These three values can be used to further refine the syntax highlighting.
# They are commented out by default, since they have priority over the theme set
# with the `syntax_style` setting and overriding its behavior can be confusing.
# literal.string = '#ba2121'
# literal.number = '#666666'
# keyword = 'bold #008000'

# style classes for colored table output
output.header = "#00ff5f bold"
output.odd-row = ""
output.even-row = ""
output.null = "#808080"

# Named queries are queries you can execute by name.
[named queries]
computer_demand = '''WITH demand AS
  (
    SELECT job_category_label, SUM(count_2018) as count_2018, SUM(count_2019) AS count_2019, region
    FROM labor.data
    WHERE job_category_label IN (
      'Computer and Mathematical'
    ) GROUP BY job_category_label, region ORDER BY count_2019 DESC
  ),
  cip_codes AS
  (
    SELECT DISTINCT cipcode_rf FROM c2c.field WHERE cipcode_rf IN (
      SELECT DISTINCT cip_4 FROM c2c.crosswalk WHERE occsoc_4 IN (
        SELECT DISTINCT occsoc4 FROM c2c.c2c_occsoc_crosswalk WHERE occsoc_2_label IN (
          'Computer and Mathematical'
        )
      )
    )
  ),
  results AS (
    SELECT institution.region, institution.instnm, field.cipcode_rf, SUM(field.ipedscount2) AS graduates FROM c2c.field
    LEFT JOIN c2c.institution ON institution.unitid = field.unitid
    WHERE field.cipcode_rf IN (SELECT cipcode_rf FROM cip_codes)
    AND field.credlev_std IN (
      'BA', 'AS'
    )
    AND field.ipedscount2 IS NOT NULL
    GROUP BY institution.region, institution.instnm, cipcode_rf ORDER BY graduates DESC
  )

  SELECT region, instnm, graduates FROM results'''
computer_and_military = '''SELECT job_category_label, SUM(count_2018) as count_2018, SUM(count_2019) AS total, region
    FROM labor.data
    WHERE job_category_label IN
    (
      'Military Specific',
      'Computer and Mathematical'
    ) GROUP BY job_category_label, region ORDER BY total DESC'''
scalar_subquery_1 = '''SELECT * FROM labor.data
WHERE count_2019 > (SELECT AVG(count_2019) FROM labor.data)'''
scalar_subquery_2 = '''SELECT * FROM labor.data labor
JOIN (SELECT AVG(count_2019) count_2019 FROM labor.data) average
ON labor.count_2019 > average.count_2019'''
job_crosswalk = SELECT * FROM c2c.crosswalk
partially_complete = '''WITH demand AS
  (
    SELECT job_category_label, SUM(count_2018) as count_2018, SUM(count_2019) AS count_2019, region
    FROM labor.data
    WHERE job_category_label IN (
      'Computer and Mathematical', 'Military Specific'
    ) GROUP BY job_category_label, region ORDER BY count_2019 DESC
  ),
  cip_codes AS
  (
    SELECT DISTINCT cip_4, job_category_label
    FROM c2c.crosswalk
    WHERE job_category_label IN (
          'Computer and Mathematical', 'Military Specific'
    )
  )
    SELECT institution.region, institution.instnm, field.cipcode_rf, cip_codes.job_category_label, SUM(field.ipedscount2) AS graduates FROM c2c.field
    JOIN c2c.institution ON institution.unitid = field.unitid
    JOIN cip_codes ON cip_codes.cip_4 = field.cipcode_rf
    WHERE field.credlev_std IN (
      'BA', 'AS'
    ) AND field.cipcode_rf IN (SELECT cipcode_rf FROM cip_codes)
    AND field.ipedscount2 IS NOT NULL
    GROUP BY institution.region, institution.instnm, field.cipcode_rf, cip_codes.job_category_label ORDER BY graduates DESC'''
nearly_complete = '''WITH demand AS
  (
    SELECT job_category_label, SUM(count_2018) as demand_2018, SUM(count_2019) AS demand_2019, region
    FROM labor.data
    WHERE job_category_label IN (
      'Computer and Mathematical', 'Military Specific'
    ) GROUP BY job_category_label, region
  ),
  cip_codes AS
  (
    SELECT DISTINCT cip_4, job_category_label
    FROM c2c.crosswalk
    WHERE job_category_label IN (
          'Computer and Mathematical', 'Military Specific'
    )
  ), supply AS
  (
    SELECT institution.region, cip_codes.job_category_label, SUM(field.ipedscount2) AS graduates FROM c2c.field
    JOIN c2c.institution ON institution.unitid = field.unitid
    JOIN cip_codes ON cip_codes.cip_4 = field.cipcode_rf
    WHERE field.credlev_std IN (
      'BA', 'AS'
    ) AND field.cipcode_rf IN (SELECT cipcode_rf FROM cip_codes)
    AND field.ipedscount2 IS NOT NULL
    GROUP BY institution.region, cip_codes.job_category_label ORDER BY graduates DESC
  )

  SELECT graduates, demand.*, graduates / demand_2019 AS ratio FROM supply
    JOIN demand ON demand.job_category_label = supply.job_category_label AND demand.region = supply.region
    ORDER BY ratio
    DESC'''
final_query = '''WITH demand AS
  (
    SELECT job_category_label, SUM(count_2018) as demand_2018, SUM(count_2019) AS demand_2019, region
    FROM labor.data
    WHERE job_category_label IN (
      'Computer and Mathematical', 'Military Specific'
    ) GROUP BY job_category_label, region
  ),
  cip_codes AS
  (
    SELECT DISTINCT cip_4, job_category_label
    FROM c2c.crosswalk
    WHERE job_category_label IN (
          'Computer and Mathematical', 'Military Specific'
    )
  ), supply AS
  (
    SELECT institution.region, cip_codes.job_category_label, SUM(field.ipedscount2) AS graduates FROM c2c.field
    JOIN c2c.institution ON institution.unitid = field.unitid
    JOIN cip_codes ON cip_codes.cip_4 = field.cipcode_rf
    WHERE field.credlev_std IN (
      'BA', 'AS'
    ) AND field.cipcode_rf IN (SELECT cipcode_rf FROM cip_codes)
    AND field.ipedscount2 IS NOT NULL
    GROUP BY institution.region, cip_codes.job_category_label ORDER BY graduates DESC
  ),
  raw_results AS (
    SELECT graduates, demand.*, graduates / demand_2019 AS ratio FROM supply
    JOIN demand ON demand.job_category_label = supply.job_category_label AND demand.region = supply.region
  )

  SELECT region, AVG(ratio) ratio
  FROM raw_results
  GROUP BY region
  ORDER BY ratio DESC'''

# DSN to call by -D option
[alias_dsn]
# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]

# Format for number representation
# for decimal "d" - 12345678, ",d" - 12,345,678
# for float "g" - 123456.78, ",g" - 123,456.78
[data_formats]
decimal = ""
float = ""
