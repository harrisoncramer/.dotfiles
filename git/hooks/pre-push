#!/bin/bash

set -e
set -o pipefail

LOGFILE=".git/hooks/pre-push.log"
echo "" > "$LOGFILE"
echo "Running pre-push hook" | tee -a "$LOGFILE"

branch_name=$(git rev-parse --abbrev-ref HEAD)
remote_exists=$(git ls-remote --heads origin $branch_name)

if [ -z "$remote_exists" ]; then
  changed_files=$(git diff --name-only $(git merge-base $branch_name HEAD))
else
  changed_files=$(git diff --name-only origin/$branch_name)
fi

app_dirs=()
pids=()
fail=0

# Use parameter expansion to strip the 'apps/' prefix and extract the first directory name
get_app_dir() {
  local file_path="$1"
  echo "${file_path#apps/}" | cut -d '/' -f 1
}

build_go_binary() {
  local app_dir="$1"
  if [ ! -f "./apps/$app_dir/go.mod" ]; then
      exit 0
  fi

  echo "Building $app_dir" | tee -a "$LOGFILE"
  cd "./apps/$app_dir" && go install .
}

for file in $changed_files; do
  if [[ $file == apps/*/* ]]; then
    app_dir=$(get_app_dir "$file")
    # Avoid duplicate builds
    if [[ ! " ${app_dirs[*]} " =~ " $app_dir " ]]; then
      app_dirs+=("$app_dir")
      (
        build_go_binary "$app_dir"
      ) &
      pids+=($!)
    fi
  fi
done

for pid in "${pids[@]}"; do
  wait "$pid" || fail=1
done

if [[ $fail -ne 0 ]]; then
  echo "One or more builds failed. Exiting." | tee -a "$LOGFILE"
  exit 1
fi

echo "Done building..." | tee -a "$LOGFILE"
echo "Verifying..."
task db:verify
